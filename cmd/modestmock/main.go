package main

import (
	"flag"
	"fmt"
	"github.com/quii/modest-mock"
	"io"
	"log"
	"os"
)

const blurb = `/*
* CODE GENERATED AUTOMATICALLY GENERATED BY github.com/quii/modest-mock
* THIS FILE SHOULD NOT BE EDITED BY HAND. UNLESS YOU ENJOY SAD TIMES.
*/

`

func main() {
	var filePath, interfaceName, out string

	flag.StringVar(&filePath, "path", "", "path to where interface declaration file")
	flag.StringVar(&interfaceName, "name", "", "name of interface you wish to mock")
	flag.StringVar(&out, "out", "", "output file, will pipe to stdout if blank")

	flag.Parse()

	if filePath == "" {
		filePath = os.Getenv("GOFILE")
	}

	f, err := os.Open(filePath)

	if err != nil {
		log.Printf("problem opening file %s %v", filePath, err)
		os.Exit(1)
	}

	mock, err := modestmock.New(f, interfaceName)

	if err != nil {
		log.Println(mock)
		log.Printf("problem creating mock %s defined in %s %v", interfaceName, filePath, err)
		os.Exit(1)
	}

	generatedMock, err := modestmock.GenerateMockCode(mock)

	if err != nil {
		log.Printf("problem generating mock code from %v %v", mock, err)
		os.Exit(1)
	}

	var destination io.Writer
	destination = os.Stdout

	if out != "" {
		o, err := os.OpenFile(out, os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0666)

		if err != nil {
			log.Printf("problem opening file to write output %s %v", out, err)
			os.Exit(1)
		}

		destination = o
	}

	fmt.Fprint(destination, blurb)
	fmt.Fprint(destination, generatedMock)
}
